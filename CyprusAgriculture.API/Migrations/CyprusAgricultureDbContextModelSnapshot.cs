// <auto-generated />
using System;
using CyprusAgriculture.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CyprusAgriculture.API.Migrations
{
    [DbContext(typeof(CyprusAgricultureDbContext))]
    partial class CyprusAgricultureDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CyprusAgriculture.API.Models.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<string>("ParentName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("locations", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-4789-a1b2-c3d4e5f67890"),
                            Code = "01",
                            CreatedAt = new DateTime(2025, 10, 22, 7, 48, 9, 680, DateTimeKind.Utc).AddTicks(5195),
                            IsActive = true,
                            Latitude = 35.1855659,
                            Longitude = 33.382276400000002,
                            Name = "Λευκωσία",
                            Type = "region"
                        },
                        new
                        {
                            Id = new Guid("b2c3d4e5-f6a7-4890-b2c3-d4e5f6a78901"),
                            Code = "02",
                            CreatedAt = new DateTime(2025, 10, 22, 7, 48, 9, 680, DateTimeKind.Utc).AddTicks(6129),
                            IsActive = true,
                            Latitude = 34.675306200000001,
                            Longitude = 33.029300499999998,
                            Name = "Λεμεσός",
                            Type = "region"
                        },
                        new
                        {
                            Id = new Guid("c3d4e5f6-a7b8-4901-c3d4-e5f6a7b89012"),
                            Code = "03",
                            CreatedAt = new DateTime(2025, 10, 22, 7, 48, 9, 680, DateTimeKind.Utc).AddTicks(6135),
                            IsActive = true,
                            Latitude = 34.917597100000002,
                            Longitude = 33.633963399999999,
                            Name = "Λάρνακα",
                            Type = "region"
                        },
                        new
                        {
                            Id = new Guid("d4e5f6a7-b8c9-4012-d4e5-f6a7b8c90123"),
                            Code = "04",
                            CreatedAt = new DateTime(2025, 10, 22, 7, 48, 9, 680, DateTimeKind.Utc).AddTicks(6137),
                            IsActive = true,
                            Latitude = 34.7766904,
                            Longitude = 32.438426700000001,
                            Name = "Πάφος",
                            Type = "region"
                        },
                        new
                        {
                            Id = new Guid("e5f6a7b8-c9d0-4123-e5f6-a7b8c9d01234"),
                            Code = "05",
                            CreatedAt = new DateTime(2025, 10, 22, 7, 48, 9, 680, DateTimeKind.Utc).AddTicks(6139),
                            IsActive = true,
                            Latitude = 35.126440700000003,
                            Longitude = 33.946379800000003,
                            Name = "Αμμόχωστος",
                            Type = "region"
                        });
                });

            modelBuilder.Entity("CyprusAgriculture.API.Models.Questionnaire", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("ClosedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<int>("CurrentResponses")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Schema")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("TargetResponses")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ThemeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ThemeId");

                    b.ToTable("questionnaires", (string)null);
                });

            modelBuilder.Entity("CyprusAgriculture.API.Models.QuestionnaireInvitation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime?>("AcceptedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeclinedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("InvitationToken")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Message")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid>("QuestionnaireId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("QuestionnaireId");

                    b.HasIndex("UserId");

                    b.ToTable("questionnaire_invitations", (string)null);
                });

            modelBuilder.Entity("CyprusAgriculture.API.Models.QuestionnaireQuota", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CurrentCount")
                        .HasColumnType("integer");

                    b.Property<string>("Municipality")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("QuestionnaireId")
                        .HasColumnType("uuid");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("TargetCount")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("QuestionnaireId");

                    b.ToTable("questionnaire_quotas", (string)null);
                });

            modelBuilder.Entity("CyprusAgriculture.API.Models.QuestionnaireResponse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FarmName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Municipality")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("QuestionnaireId")
                        .HasColumnType("uuid");

                    b.Property<string>("Region")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ResponseData")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("SubmittedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("QuestionnaireId");

                    b.HasIndex("UserId");

                    b.ToTable("questionnaire_responses", (string)null);
                });

            modelBuilder.Entity("CyprusAgriculture.API.Models.Theme", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("themes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f6a7b8c9-d0e1-4234-f6a7-b8c9d0e12345"),
                            Category = "Crops",
                            CreatedAt = new DateTime(2025, 10, 22, 7, 48, 9, 681, DateTimeKind.Utc).AddTicks(720),
                            Description = "Ερωτηματολόγια σχετικά με καλλιέργειες, σπόρους, λιπάσματα",
                            IsActive = true,
                            Name = "Φυτική Παραγωγή"
                        },
                        new
                        {
                            Id = new Guid("a7b8c9d0-e1f2-4345-a7b8-c9d0e1f23456"),
                            Category = "Livestock",
                            CreatedAt = new DateTime(2025, 10, 22, 7, 48, 9, 681, DateTimeKind.Utc).AddTicks(1320),
                            Description = "Ερωτηματολόγια για ζωικό κεφάλαιο και ζωική παραγωγή",
                            IsActive = true,
                            Name = "Κτηνοτροφία"
                        },
                        new
                        {
                            Id = new Guid("b8c9d0e1-f2a3-4456-b8c9-d0e1f2a34567"),
                            Category = "Fisheries",
                            CreatedAt = new DateTime(2025, 10, 22, 7, 48, 9, 681, DateTimeKind.Utc).AddTicks(1323),
                            Description = "Ερωτηματολόγια για αλιευτικές δραστηριότητες",
                            IsActive = true,
                            Name = "Αλιεία"
                        },
                        new
                        {
                            Id = new Guid("c9d0e1f2-a3b4-4567-c9d0-e1f2a3b45678"),
                            Category = "Irrigation",
                            CreatedAt = new DateTime(2025, 10, 22, 7, 48, 9, 681, DateTimeKind.Utc).AddTicks(1325),
                            Description = "Ερωτηματολόγια για αρδευτικά συστήματα",
                            IsActive = true,
                            Name = "Άρδευση"
                        });
                });

            modelBuilder.Entity("CyprusAgriculture.API.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Organization")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Region")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("CyprusAgriculture.API.Models.Location", b =>
                {
                    b.HasOne("CyprusAgriculture.API.Models.Location", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("CyprusAgriculture.API.Models.Questionnaire", b =>
                {
                    b.HasOne("CyprusAgriculture.API.Models.User", "Creator")
                        .WithMany("CreatedQuestionnaires")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CyprusAgriculture.API.Models.Theme", null)
                        .WithMany("Questionnaires")
                        .HasForeignKey("ThemeId");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("CyprusAgriculture.API.Models.QuestionnaireInvitation", b =>
                {
                    b.HasOne("CyprusAgriculture.API.Models.Questionnaire", "Questionnaire")
                        .WithMany("Invitations")
                        .HasForeignKey("QuestionnaireId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CyprusAgriculture.API.Models.User", "User")
                        .WithMany("Invitations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Questionnaire");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CyprusAgriculture.API.Models.QuestionnaireQuota", b =>
                {
                    b.HasOne("CyprusAgriculture.API.Models.Questionnaire", "Questionnaire")
                        .WithMany("Quotas")
                        .HasForeignKey("QuestionnaireId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Questionnaire");
                });

            modelBuilder.Entity("CyprusAgriculture.API.Models.QuestionnaireResponse", b =>
                {
                    b.HasOne("CyprusAgriculture.API.Models.Questionnaire", "Questionnaire")
                        .WithMany("Responses")
                        .HasForeignKey("QuestionnaireId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CyprusAgriculture.API.Models.User", "User")
                        .WithMany("Responses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Questionnaire");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CyprusAgriculture.API.Models.Location", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("CyprusAgriculture.API.Models.Questionnaire", b =>
                {
                    b.Navigation("Invitations");

                    b.Navigation("Quotas");

                    b.Navigation("Responses");
                });

            modelBuilder.Entity("CyprusAgriculture.API.Models.Theme", b =>
                {
                    b.Navigation("Questionnaires");
                });

            modelBuilder.Entity("CyprusAgriculture.API.Models.User", b =>
                {
                    b.Navigation("CreatedQuestionnaires");

                    b.Navigation("Invitations");

                    b.Navigation("Responses");
                });
#pragma warning restore 612, 618
        }
    }
}
